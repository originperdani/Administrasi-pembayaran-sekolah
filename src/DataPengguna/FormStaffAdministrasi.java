/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package DataPengguna;

import DashboardTampilan.DashboardStaffAdministrasi;
import Koneksi.DatabaseConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ORIGIN
 */
public class FormStaffAdministrasi extends javax.swing.JFrame {
    
      private DefaultTableModel model;
      private boolean isNewRecord = true;

    /**
     * Creates new form FormStaffAdministrasi
     */
  public FormStaffAdministrasi() {
        initComponents();
        
        // Setup table model
        String[] columnNames = {"ID Staff", "Nama Staff", "Telepon", "Alamat"};
        model = new DefaultTableModel(columnNames, 0);
        jTable2.setModel(model);
        
        // Load initial data
        loadTableData();
        generateIdStaff();
        
        // Add table selection listener
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableClicked(evt);
            }
        });
    }
  
  private void tableClicked(java.awt.event.MouseEvent evt) {
        int row = jTable2.getSelectedRow();
        if (row >= 0) {
            isNewRecord = false;
            jTextField1.setText(jTable2.getValueAt(row, 0).toString());
            jTextField2.setText(jTable2.getValueAt(row, 1).toString());
            jTextField3.setText(jTable2.getValueAt(row, 2).toString());
            jTextArea1.setText(jTable2.getValueAt(row, 3).toString());
        }
    }
  
  private void generateIdStaff() {
        if (!isNewRecord) return;
        
        try (Connection conn = DatabaseConnection.connect()) {
            String sql = "SELECT MAX(id_staff) as last_id FROM data_staff_administrasi";
            PreparedStatement pst = conn.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            
            if (rs.next()) {
                String lastId = rs.getString("last_id");
                if (lastId != null) {
                    int nextId = Integer.parseInt(lastId) + 1;
                    // Ensure ID starts from 20001
                    nextId = Math.max(nextId, 20001);
                    jTextField1.setText(String.valueOf(nextId));
                } else {
                    jTextField1.setText("20001"); // Starting from 20001
                }
            } else {
                jTextField1.setText("20001"); // Starting from 20001
            }
        } catch (SQLException | NumberFormatException e) {
            jTextField1.setText("20001"); // Default starting ID
        }
    }
        
    
       private void clearForm() {
        isNewRecord = true;
        jTextField1.setText(""); // ID Staff
        jTextField2.setText(""); // Nama Staff  
        jTextField3.setText(""); // Telepon
        jTextArea1.setText("");  // Alamat
        generateIdStaff();
    }
        
       private void loadTableData() {
        try (Connection conn = DatabaseConnection.connect()) {
            String sql = "SELECT * FROM data_staff_administrasi";
            PreparedStatement pst = conn.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            
            // Clear existing table data
            model.setRowCount(0);
            
            while (rs.next()) {
                Object[] row = {
                    rs.getString("id_staff"),
                    rs.getString("nama_staff"),
                    rs.getString("telepon"),
                    rs.getString("alamat")
                };
                model.addRow(row);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error loading data: " + e.getMessage());
            e.printStackTrace();
        }
    }
        
        


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 102, 102));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Rockwell", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("ID Staff :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(54, 75, 0, 0);
        jPanel1.add(jLabel1, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Rockwell", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("FORM STAFF ADMINISTRASI");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 35;
        gridBagConstraints.ipady = 6;
        gridBagConstraints.insets = new java.awt.Insets(30, 0, 0, 0);
        jPanel1.add(jLabel2, gridBagConstraints);

        jTextField1.setEditable(false);
        jTextField1.setBackground(new java.awt.Color(204, 255, 255));
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 297;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(52, 5, 0, 0);
        jPanel1.add(jTextField1, gridBagConstraints);

        jTextField2.setBackground(new java.awt.Color(204, 255, 255));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 296;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(31, 5, 0, 0);
        jPanel1.add(jTextField2, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Rockwell", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Nama Staff :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(34, 75, 0, 0);
        jPanel1.add(jLabel3, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Rockwell", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Telepon :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(36, 75, 0, 0);
        jPanel1.add(jLabel4, gridBagConstraints);

        jTextField3.setBackground(new java.awt.Color(204, 255, 255));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 296;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(33, 5, 0, 0);
        jPanel1.add(jTextField3, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Rockwell", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Alamat :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(45, 39, 0, 0);
        jPanel1.add(jLabel5, gridBagConstraints);

        jTextArea1.setBackground(new java.awt.Color(204, 255, 255));
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 15;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 20;
        gridBagConstraints.gridheight = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 270;
        gridBagConstraints.ipady = 38;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(43, 6, 0, 75);
        jPanel1.add(jScrollPane1, gridBagConstraints);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 472;
        gridBagConstraints.ipady = 120;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(18, 75, 0, 0);
        jPanel1.add(jScrollPane3, gridBagConstraints);

        jButton1.setBackground(new java.awt.Color(204, 255, 255));
        jButton1.setFont(new java.awt.Font("Bahnschrift", 0, 13)); // NOI18N
        jButton1.setText("TAMBAH");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 19;
        gridBagConstraints.ipadx = 129;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(21, 4, 0, 0);
        jPanel1.add(jButton1, gridBagConstraints);

        jButton2.setBackground(new java.awt.Color(204, 255, 255));
        jButton2.setFont(new java.awt.Font("Bahnschrift", 0, 13)); // NOI18N
        jButton2.setText("EDIT");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 19;
        gridBagConstraints.ipadx = 151;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(13, 4, 0, 0);
        jPanel1.add(jButton2, gridBagConstraints);

        jButton3.setBackground(new java.awt.Color(204, 255, 255));
        jButton3.setFont(new java.awt.Font("Bahnschrift", 0, 13)); // NOI18N
        jButton3.setText("CARI");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 19;
        gridBagConstraints.ipadx = 149;
        gridBagConstraints.ipady = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(13, 4, 0, 0);
        jPanel1.add(jButton3, gridBagConstraints);

        jButton4.setBackground(new java.awt.Color(204, 255, 255));
        jButton4.setFont(new java.awt.Font("Bahnschrift", 0, 13)); // NOI18N
        jButton4.setText("HAPUS");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 19;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.ipadx = 135;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 4, 0, 0);
        jPanel1.add(jButton4, gridBagConstraints);

        jButton5.setBackground(new java.awt.Color(204, 255, 255));
        jButton5.setFont(new java.awt.Font("Bahnschrift", 0, 13)); // NOI18N
        jButton5.setText("KEMBALI");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.gridwidth = 36;
        gridBagConstraints.ipadx = 215;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.insets = new java.awt.Insets(107, 0, 70, 0);
        jPanel1.add(jButton5, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1077, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 717, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
     try (Connection conn = DatabaseConnection.connect()) {
            // Validate required fields
            if (jTextField1.getText().trim().isEmpty() || 
                jTextField2.getText().trim().isEmpty() || 
                jTextField3.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "ID Staff, Nama Staff dan Telepon harus diisi!");
                return;
            }
            
            String sql;
            if (isNewRecord) {
                sql = "INSERT INTO data_staff_administrasi (id_staff, nama_staff, telepon, alamat) VALUES (?, ?, ?, ?)";
            } else {
                sql = "UPDATE data_staff_administrasi SET nama_staff=?, telepon=?, alamat=? WHERE id_staff=?";
            }
            
            PreparedStatement pst = conn.prepareStatement(sql);
            
            if (isNewRecord) {
                pst.setInt(1, Integer.parseInt(jTextField1.getText().trim()));
                pst.setString(2, jTextField2.getText().trim());
                pst.setString(3, jTextField3.getText().trim());
                pst.setString(4, jTextArea1.getText().trim());
            } else {
                pst.setString(1, jTextField2.getText().trim());
                pst.setString(2, jTextField3.getText().trim());
                pst.setString(3, jTextArea1.getText().trim());
                pst.setInt(4, Integer.parseInt(jTextField1.getText().trim()));
            }
            
            int result = pst.executeUpdate();
            if (result > 0) {
                JOptionPane.showMessageDialog(this, "Data staff berhasil " + (isNewRecord ? "ditambahkan!" : "diupdate!"));
                clearForm();
                loadTableData();
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "ID Staff harus berupa angka!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
         try (Connection conn = DatabaseConnection.connect()) {
            // Check if ID is selected
            if (jTextField1.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Pilih data yang akan diedit terlebih dahulu!");
                return;
            }
            
            // Validate required fields
            if (jTextField2.getText().trim().isEmpty() || jTextField3.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Nama Staff dan Telepon harus diisi!");
                return;
            }
            
            String sql = "UPDATE data_staff_administrasi SET nama_staff=?, telepon=?, alamat=? WHERE id_staff=?";
            PreparedStatement pst = conn.prepareStatement(sql);
            
            pst.setString(1, jTextField2.getText().trim()); // nama_staff
            pst.setString(2, jTextField3.getText().trim()); // telepon
            pst.setString(3, jTextArea1.getText().trim());  // alamat
            pst.setInt(4, Integer.parseInt(jTextField1.getText().trim())); // id_staff
            
            int result = pst.executeUpdate();
            if (result > 0) {
                JOptionPane.showMessageDialog(this, "Data staff berhasil diupdate!");
                clearForm();
                loadTableData(); // Refresh table
            } else {
                JOptionPane.showMessageDialog(this, "Data tidak ditemukan atau tidak ada perubahan!");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "ID Staff tidak valid!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error updating data: " + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
       try (Connection conn = DatabaseConnection.connect()) {
            String searchTerm = JOptionPane.showInputDialog(this, "Masukkan nama staff atau telepon untuk pencarian:");
            
            if (searchTerm != null && !searchTerm.trim().isEmpty()) {
                String sql = "SELECT * FROM data_staff_administrasi WHERE nama_staff LIKE ? OR telepon LIKE ?";
                PreparedStatement pst = conn.prepareStatement(sql);
                pst.setString(1, "%" + searchTerm.trim() + "%");
                pst.setString(2, "%" + searchTerm.trim() + "%");
                ResultSet rs = pst.executeQuery();
                
                model.setRowCount(0); // Clear table
                
                boolean found = false;
                while (rs.next()) {
                    found = true;
                    Object[] row = {
                        rs.getString("id_staff"),
                        rs.getString("nama_staff"),
                        rs.getString("telepon"),
                        rs.getString("alamat")
                    };
                    model.addRow(row);
                }
                
                if (!found) {
                    JOptionPane.showMessageDialog(this, "Data tidak ditemukan!");
                    loadTableData(); // Load all data back
                } else {
                    JOptionPane.showMessageDialog(this, "Ditemukan " + model.getRowCount() + " data.");
                }
            } else if (searchTerm != null) {
                // If search is empty, load all data
                loadTableData();
            }
            // If searchTerm is null (cancelled), do nothing
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error searching data: " + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
         String selectedId = jTextField1.getText().trim();
    if (selectedId.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Pilih data yang akan dihapus terlebih dahulu!");
        return;
    }
    
    int confirm = JOptionPane.showConfirmDialog(
        this, 
        "Apakah Anda yakin ingin menghapus data staff dengan ID: " + selectedId + "?", 
        "Konfirmasi Hapus", 
        JOptionPane.YES_NO_OPTION);
        
    if (confirm == JOptionPane.YES_OPTION) {
        try (Connection conn = DatabaseConnection.connect()) {
            conn.setAutoCommit(false); // Start transaction
            
            try {
                // 1. Cek apakah staff memiliki transaksi
                boolean hasTransactions = false;
                try (PreparedStatement pstCheck = conn.prepareStatement(
                    "SELECT COUNT(*) FROM transaksi_pembayaran WHERE id_staff=?")) {
                    pstCheck.setInt(1, Integer.parseInt(selectedId));
                    ResultSet rs = pstCheck.executeQuery();
                    if (rs.next() && rs.getInt(1) > 0) {
                        hasTransactions = true;
                    }
                }
                
                if (hasTransactions) {
                    // 2a. Jika ada transaksi, tampilkan opsi
                    int option = JOptionPane.showOptionDialog(this,
                        "Staff ini memiliki transaksi terkait. Apa yang ingin Anda lakukan?",
                        "Peringatan",
                        JOptionPane.YES_NO_CANCEL_OPTION,
                        JOptionPane.WARNING_MESSAGE,
                        null,
                        new Object[]{"Hapus Semua Transaksi", "Setel Transaksi ke NULL", "Batal"},
                        "Batal");
                    
                    if (option == 0) { // Hapus transaksi
                        try (PreparedStatement pstDeleteTrans = conn.prepareStatement(
                            "DELETE FROM transaksi_pembayaran WHERE id_staff=?")) {
                            pstDeleteTrans.setInt(1, Integer.parseInt(selectedId));
                            pstDeleteTrans.executeUpdate();
                        }
                    } else if (option == 1) { // Setel ke NULL
                        try (PreparedStatement pstUpdateTrans = conn.prepareStatement(
                            "UPDATE transaksi_pembayaran SET id_staff=NULL WHERE id_staff=?")) {
                            pstUpdateTrans.setInt(1, Integer.parseInt(selectedId));
                            pstUpdateTrans.executeUpdate();
                        }
                    } else {
                        return; // Batal
                    }
                }
                
                // 3. Hapus staff
                try (PreparedStatement pstDeleteStaff = conn.prepareStatement(
                    "DELETE FROM data_staff_administrasi WHERE id_staff=?")) {
                    pstDeleteStaff.setInt(1, Integer.parseInt(selectedId));
                    int deleted = pstDeleteStaff.executeUpdate();
                    
                    if (deleted > 0) {
                        conn.commit();
                        JOptionPane.showMessageDialog(this, "Data staff berhasil dihapus!");
                        clearForm();
                        loadTableData();
                    }
                }
            } catch (SQLException e) {
                conn.rollback();
                JOptionPane.showMessageDialog(this, "Error menghapus data: " + e.getMessage());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Database Error: " + e.getMessage());
        }
      }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
         this.dispose();
         new DashboardStaffAdministrasi().setVisible(true);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormStaffAdministrasi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormStaffAdministrasi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormStaffAdministrasi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormStaffAdministrasi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormStaffAdministrasi().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
